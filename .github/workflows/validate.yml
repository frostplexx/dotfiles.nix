name: "Nix Configuration Validation"
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '.github/**'
      - 'README.md'
  pull_request:
    branches:
      - "main"

jobs:
  security-check:
    name: GitGuardian Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.33.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  lint:
    name: Statix Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Run statix linter
        run: |
          echo "Linting Flake..."
          if make lint; then
            echo "success=true" >> $GITHUB_ENV
          else
            echo "Lint failed, listing flake.lock for debugging:"
            cat flake.lock
            echo "success=false" >> $GITHUB_ENV
            exit 1
          fi

  detect-configs:
    name: Detect Configurations
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
      - name: Install nix-editor
        run: nix profile install github:snowfallorg/nix-editor
      - name: Generate Configuration Matrix
        id: set-matrix
        shell: bash
        run: |
          # Get configurations using nix-editor and extract just the top-level key
          echo "Detecting NixOS configurations..."
          NIXOS_CONFIGS=$(nix-editor hosts/default.nix nixosConfigurations | grep -E "^  [a-zA-Z]+ = {" | cut -d' ' -f3)
          
          echo "Detecting Darwin configurations..."
          DARWIN_CONFIGS=$(nix-editor hosts/default.nix darwinConfigurations | grep -E "^  [a-zA-Z]+ = {" | cut -d' ' -f3)
          
          # Debug output
          echo "Detected NixOS configs: $NIXOS_CONFIGS"
          echo "Detected Darwin configs: $DARWIN_CONFIGS"
          
          # Build the JSON array
          MATRIX_JSON="{"
          MATRIX_JSON+="\"include\": ["
          
          # Add NixOS configurations
          for config in $NIXOS_CONFIGS; do
            if [ -n "$config" ]; then
              MATRIX_JSON+="{\"name\":\"$config\",\"os\":\"ubuntu-latest\",\"type\":\"nixos\",\"config\":\"nixosConfigurations.$config.config.system.build.toplevel\"},"
            fi
          done
          
          # Add Darwin configurations
          for config in $DARWIN_CONFIGS; do
            if [ -n "$config" ]; then
              MATRIX_JSON+="{\"name\":\"$config\",\"os\":\"macos-latest\",\"type\":\"darwin\",\"config\":\"darwinConfigurations.$config.system\"},"
            fi
          done
          
          # Remove trailing comma and close JSON
          MATRIX_JSON=${MATRIX_JSON%,}
          MATRIX_JSON+="]}"
          
          # Set the output
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  test-configurations:
    name: Test Nix Configurations
    needs: [security-check, lint, detect-configs]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.detect-configs.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
      - name: Enable Nix Flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
      - name: Build Configuration
        run: |
          echo "Building configuration for ${{ matrix.name }} (${{ matrix.type }})"
          nix build .#${{ matrix.config }} --accept-flake-config --impure --extra-experimental-features flakes --extra-experimental-features nix-command --dry-run
