name: "Nix Configuration Validation"
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '.github/**'
      - 'README.md'
  pull_request:
    branches:
      - "main"

jobs:
  security-check:
    name: GitGuardian Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.38.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  lint:
    name: Statix Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Run statix linter
        run: |
          echo "Linting Flake..."
          if make lint; then
            echo "success=true" >> $GITHUB_ENV
          else
            echo "Lint failed, listing flake.lock for debugging:"
            cat flake.lock
            echo "success=false" >> $GITHUB_ENV
            exit 1
          fi

  vulnerability-scan:
    name: Nix Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
      - name: Install vulnix
        run: |
          nix-env -iA nixpkgs.vulnix
          export LANG=C.UTF-8
      - name: Run vulnerability scan
        run: |
          echo "Running vulnerability scan on configurations..."
          # First detect the configurations
          NIXOS_CONFIGS=$(nix eval --impure --json .#nixosConfigurations --apply builtins.attrNames)
          
          # Create a temporary file to collect all vulnerable packages
          touch vulnerabilities.txt
          
          # Check each configuration
          for config in $(echo "$NIXOS_CONFIGS" | jq -r '.[]'); do
            echo "Scanning $config for vulnerabilities..."
            # Build the configuration and scan it
            nix build .#nixosConfigurations.$config.config.system.build.toplevel --accept-flake-config --impure --extra-experimental-features flakes --extra-experimental-features nix-command --dry-run
            
            # Run vulnix on the result and save output
            if vulnix --system; then
              echo "No vulnerabilities found in $config" >> vulnerabilities.txt
            else
              echo "Vulnerabilities found in $config" >> vulnerabilities.txt
              vulnix --system >> vulnerabilities.txt
            fi
          done
          
          # Check if vulnerabilities were found
          if grep -q "Vulnerabilities found" vulnerabilities.txt; then
            echo "::warning ::Vulnerabilities detected in Nix configurations. See details below:"
            cat vulnerabilities.txt
            # We don't fail the build yet, just warn about vulnerabilities
          else
            echo "No vulnerabilities found in any configuration."
          fi

  detect-configs:
    name: Detect Configurations
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
      - name: Generate Configuration Matrix
        id: set-matrix
        shell: bash
        run: |
          # Use nix eval to get configurations directly from the flake
          echo "Detecting NixOS configurations..."
          NIXOS_CONFIGS=$(nix eval --impure --json .#nixosConfigurations --apply builtins.attrNames)
          
          echo "Detecting Darwin configurations..."
          DARWIN_CONFIGS=$(nix eval --impure --json .#darwinConfigurations --apply builtins.attrNames 2>/dev/null || echo "[]")
          
          # Debug output
          echo "Detected NixOS configs: $NIXOS_CONFIGS"
          echo "Detected Darwin configs: $DARWIN_CONFIGS"
          
          # Create a simpler matrix JSON formation approach
          echo "Building matrix JSON..."
          MATRIX_JSON='{"include":['
          
          # Process NixOS configs
          NIXOS_ARRAY=$(echo "$NIXOS_CONFIGS" | jq -c .)
          if [ "$NIXOS_ARRAY" != "[]" ]; then
            for config in $(echo "$NIXOS_CONFIGS" | jq -r '.[]'); do
              MATRIX_JSON+="{"
              MATRIX_JSON+="\"name\":\"$config\","
              MATRIX_JSON+="\"os\":\"ubuntu-latest\","
              MATRIX_JSON+="\"type\":\"nixos\","
              MATRIX_JSON+="\"config\":\"nixosConfigurations.$config.config.system.build.toplevel\""
              MATRIX_JSON+="},"
            done
          fi
          
          # Process Darwin configs
          DARWIN_ARRAY=$(echo "$DARWIN_CONFIGS" | jq -c .)
          if [ "$DARWIN_ARRAY" != "[]" ]; then
            for config in $(echo "$DARWIN_CONFIGS" | jq -r '.[]'); do
              MATRIX_JSON+="{"
              MATRIX_JSON+="\"name\":\"$config\","
              MATRIX_JSON+="\"os\":\"macos-latest\","
              MATRIX_JSON+="\"type\":\"darwin\","
              MATRIX_JSON+="\"config\":\"darwinConfigurations.$config.system\""
              MATRIX_JSON+="},"
            done
          fi
          
          # Remove trailing comma if it exists
          MATRIX_JSON=${MATRIX_JSON%,}
          MATRIX_JSON+="]}"
          
          echo "Matrix JSON: $MATRIX_JSON"
          
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  test-configurations:
    name: Test Nix Configurations
    needs: [security-check, lint, vulnerability-scan, detect-configs]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.detect-configs.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
      - name: Enable Nix Flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
      - name: Build Configuration
        run: |
          echo "Building configuration for ${{ matrix.name }} (${{ matrix.type }})"
          nix build .#${{ matrix.config }} --accept-flake-config --impure --extra-experimental-features flakes --extra-experimental-features nix-command --dry-run
