name: Build NixOS ISOs

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
        type: string

jobs:
  discover-configurations:
    runs-on: ubuntu-latest
    outputs:
      configurations: ${{ steps.get-configs.outputs.configs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Get NixOS configurations
        id: get-configs
        run: |
          CONFIGS=$(nix eval --impure --json '.#nixosConfigurations' --apply 'builtins.attrNames')
          echo "configs=${CONFIGS}" >> $GITHUB_OUTPUT
          echo "Discovered configurations: ${CONFIGS}"

  build-isos:
    needs: discover-configurations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: ${{ fromJson(needs.discover-configurations.outputs.configurations) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Build ISO for ${{ matrix.config }}
        run: |
          echo "Building ISO for ${{ matrix.config }}..."
          
          # Create a temporary Nix expression to build the ISO
          cat > build-iso.nix <<EOF
          { config }:
          let
            flake = builtins.getFlake (toString ./.);
            nixosConfigurations = flake.nixosConfigurations;
            
            # Get the configuration we want to build
            nixosConfig = nixosConfigurations.\${config};
            
            # Create a new configuration that includes the ISO image
            isoConfig = nixosConfig.extendModules {
              modules = [
                # Define custom options if they're used in your flake
                ({ lib, ... }: {
                  options = {
                    # Define the 'user' option that's referenced in your flake
                    user = lib.mkOption {
                      type = lib.types.str;
                      description = "The primary user of the system";
                      default = "daniel"; # Use the same default as in your flake
                    };
                  };
                })
                # ISO-specific configurations
                ({ lib, config, pkgs, ... }: {
                  isoImage.makeEfiBootable = true;
                  isoImage.makeUsbBootable = true;
                  isoImage.isoName = "\${config.networking.hostName or "nixos"}-\${config.system.nixos.label}-iso.iso";
                  
                  # Ensure your SSH keys are included for installation
                  users.users.root.openssh.authorizedKeys.keys = config.users.users.root.openssh.authorizedKeys.keys or [];
                })
                (import <nixpkgs/nixos/modules/installer/cd-dvd/installation-cd-minimal.nix>)
              ];
            };
          in
            isoConfig.config.system.build.isoImage
          EOF
          
          # Build the ISO
          ISO_PATH=$(nix build --impure --print-out-paths --no-link \
            --expr "(import ./build-iso.nix { config = \"${{ matrix.config }}\"; })")
          
          # Copy ISO to a known location
          mkdir -p isos
          cp "$ISO_PATH"/*.iso "isos/${{ matrix.config }}.iso"
          
          echo "ISO built successfully: isos/${{ matrix.config }}.iso"

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config }}-iso
          path: isos/${{ matrix.config }}.iso
          retention-days: 5

  attach-to-release:
    needs: build-isos
    runs-on: ubuntu-latest
    steps:
      - name: Download all ISO artifacts
        uses: actions/download-artifact@v4
        with:
          path: isos/
          merge-multiple: true

      - name: List ISOs
        run: find isos -type f -name "*.iso" | sort

      - name: Attach ISOs to release
        uses: softprops/action-gh-release@v2
        with:
          files: isos/**/*.iso
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
